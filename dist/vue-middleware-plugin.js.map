{"version":3,"file":"vue-middleware-plugin.js","sources":["../src/controller/controller.ts","../src/middleware/next-factory.ts","../src/middleware/next-middleware.ts","../src/middleware/MiddlewarePlugin.ts","../src/casting/castId.ts"],"sourcesContent":["import { reactive } from 'vue'\n\nexport interface route {\n  query?: any,\n  meta?: {\n    name: string\n    title: string,\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    middleware?: Function | Function[],\n    controller?: [any, string],\n  }\n  params?: {\n    id: string | undefined\n  },\n}\n\ninterface navigation {\n  to: route,\n  from: route,\n  route: any\n}\n\nexport let request: any = reactive({})\nexport let model: any = reactive({})\nexport let params: any = reactive({})\nexport const useController = () => {\n  return { request, model, params }\n}\nexport const useModel = () => {\n  return model\n}\n// export const useRequest = () => {\n//   return request\n// }\n\nexport const requestsInjection = async (navigation: navigation) => {\n  request = navigation.to.query\n\n  if (!navigation.to.meta?.controller) throw new Error('Controller not defined')\n  if (!navigation.to.meta?.controller.length) throw new Error('Controller/Method not defined')\n  if (!navigation.to.params) new Error('No Params found')\n  params = serializeParams(navigation.to.params)\n  // console.log('Serialized Params: ', params)\n\n  model = new (navigation.to.meta.controller[ 0 ])()\n  const method = navigation.to.meta.controller[ 1 ]\n  await model[ method ](params.id)\n  console.log(model.model.comments)\n\n  return\n}\n\nfunction serializeParams(params: any) {\n  Object.keys(params).forEach(key => {\n    if (params[ key ]) {\n      params[ key ] = Number(params[ key ])\n    }\n    else if (params[ key ] === '') {\n      params[ key ] = null\n    }\n  })\n\n  return params\n}\n","// Creates a `nextMiddleware()` function which not only\n// runs the default `next()` callback but also triggers\n// the subsequent Middleware function.\n\nimport type { route } from '@/controller/controller'\nimport type { Router } from 'vue-router'\n\nconst nextFactory = (\n  context: { from?: route; to?: route; router?: Router; next?: any }, middleware: any|any[],\n  index: number\n) => {\n  const subsequentMiddleware = middleware[ index ]\n  // If no subsequent Middleware exists,\n  // the default `next()` callback is returned.\n  if (!subsequentMiddleware) return context.next\n\n  return (..._parameters: any[]) => {\n    // Run the default Vue Router `next()` callback first.\n    // context.next(...parameters)\n    // Then run the subsequent Middleware with a new\n    // `nextMiddleware()` callback.\n    nextFactory(context, middleware, index + 1)\n    subsequentMiddleware({ ...context })\n  }\n}\n\nexport default nextFactory\n","// Creates a `nextMiddleware()` function which not only\n// runs the default `next()` callback but also triggers\n// the subsequent Middleware function.\nimport type { route } from '@/controller/controller'\nimport nextFactory from '@/middleware/next-factory'\nimport type { Router } from 'vue-router'\n\nconst nextMiddleware = (from: route, to: route, router: Router) => {\n  if (to.meta?.middleware) {\n    const middleware = Array.isArray(to.meta.middleware)\n      ? to.meta.middleware\n      : [to.meta.middleware]\n\n    const context = {\n      from,\n      to,\n      // next,\n      router\n    }\n    const nextMiddleware = nextFactory(context, middleware, 1)\n\n    return middleware[ 0 ]({ ...context, next: nextMiddleware })\n  }\n}\n\nexport default nextMiddleware\n","import nextMiddleware from '@/middleware/next-middleware'\nimport type { Router } from 'vue-router'\nimport type { App } from 'vue'\n\nexport default {\n  install: (app: App, router: Router) => {\n    router.beforeEach((to, from) => {\n      nextMiddleware(from, to, router)\n    })\n  }\n}\n","import type { RouteRecordRaw } from 'vue-router'\n\nfunction castId(id: string | undefined) {\n  return function(route: RouteRecordRaw) {\n    if (id) {\n      return {...route.params, id: parseInt(id) }\n    }\n\n    return route.params\n  }\n}\n\nexport default castId\n"],"names":["request","reactive","model","params","useController","useModel","requestsInjection","navigation","_a","_b","serializeParams","method","key","nextFactory","context","middleware","index","subsequentMiddleware","_parameters","nextMiddleware","from","to","router","MiddlewarePlugin","app","castId","id","route"],"mappings":";AAsBW,IAAAA,IAAeC,EAAS,EAAE,GAC1BC,IAAaD,EAAS,EAAE,GACxBE,IAAcF,EAAS,EAAE;AAC7B,MAAMG,IAAgB,OACpB,EAAE,SAAAJ,GAAS,OAAAE,GAAO,QAAAC,EAAO,IAErBE,IAAW,MACfH,GAMII,IAAoB,OAAOC,MAA2B;;AAG7D,MAFJP,IAAUO,EAAW,GAAG,OAEpB,GAACC,IAAAD,EAAW,GAAG,SAAd,QAAAC,EAAoB,YAAkB,OAAA,IAAI,MAAM,wBAAwB;AACzE,MAAA,GAACC,IAAAF,EAAW,GAAG,SAAd,QAAAE,EAAoB,WAAW,QAAQ,OAAM,IAAI,MAAM,+BAA+B;AAC3F,EAAKF,EAAW,GAAG,QACVJ,IAAAO,EAAgBH,EAAW,GAAG,MAAM,GAG7CL,IAAQ,IAAKK,EAAW,GAAG,KAAK,WAAY,CAAE,EAAG;AACjD,QAAMI,IAASJ,EAAW,GAAG,KAAK,WAAY,CAAE;AAChD,QAAML,EAAOS,CAAO,EAAER,EAAO,EAAE,GACvB,QAAA,IAAID,EAAM,MAAM,QAAQ;AAGlC;AAEA,SAASQ,EAAgBP,GAAa;AACpC,gBAAO,KAAKA,CAAM,EAAE,QAAQ,CAAOS,MAAA;AAC7BT,IAAAA,EAAQS,CAAI,IACdT,EAAQS,CAAI,IAAI,OAAOT,EAAQS,CAAI,CAAC,IAE7BT,EAAQS,CAAI,MAAM,OACzBT,EAAQS,CAAI,IAAI;AAAA,EAClB,CACD,GAEMT;AACT;ACxDA,MAAMU,IAAc,CAClBC,GAAoEC,GACpEC,MACG;AACG,QAAAC,IAAuBF,EAAYC,CAAM;AAG3C,SAACC,IAEE,IAAIC,MAAuB;AAKpB,IAAAL,EAAAC,GAASC,GAAYC,IAAQ,CAAC,GACrBC,EAAA,EAAE,GAAGH,GAAS;AAAA,EACrC,IATkCA,EAAQ;AAU5C,GCjBMK,IAAiB,CAACC,GAAaC,GAAWC,MAAmB;;AAC7D,OAAAd,IAAAa,EAAG,SAAH,QAAAb,EAAS,YAAY;AACvB,UAAMO,IAAa,MAAM,QAAQM,EAAG,KAAK,UAAU,IAC/CA,EAAG,KAAK,aACR,CAACA,EAAG,KAAK,UAAU,GAEjBP,IAAU;AAAA,MACd,MAAAM;AAAA,MACA,IAAAC;AAAA;AAAA,MAEA,QAAAC;AAAA,IACF,GACMH,IAAiBN,EAAYC,GAASC,GAAY,CAAC;AAElD,WAAAA,EAAY,CAAE,EAAE,EAAE,GAAGD,GAAS,MAAMK,GAAgB;AAAA,EAAA;AAE/D,GCnBeI,IAAA;AAAA,EACb,SAAS,CAACC,GAAUF,MAAmB;AAC9B,IAAAA,EAAA,WAAW,CAACD,GAAID,MAAS;AACf,MAAAD,EAAAC,GAAMC,GAAIC,CAAM;AAAA,IAAA,CAChC;AAAA,EAAA;AAEL;ACRA,SAASG,EAAOC,GAAwB;AACtC,SAAO,SAASC,GAAuB;AACrC,WAAID,IACK,EAAC,GAAGC,EAAM,QAAQ,IAAI,SAASD,CAAE,EAAE,IAGrCC,EAAM;AAAA,EACf;AACF;"}